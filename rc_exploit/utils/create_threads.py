import threading
import socket
import ssl


class RaceConditionThread(threading.Thread):
    def __init__(self, num_thread, plugin_inst, event):
        super(RaceConditionThread, self).__init__(self)
        self.num_thread = num_thread
        self.plugin_inst = plugin_inst
        self.event = event
        self.ready = False

    def run(self):
        conn = self.connect(self.plugin_inst.get_host(),
                            self.plugin_inst.get_port(),
                            self.plugin_inst.use_ssl())

        request_str = self.plugin_inst.get_request_str()

        # Send the whole request, except from the last byte. The server will
        # wait for some seconds until the last byte is sent, because the content
        # length tells him there are missing bytes
        conn.send(request_str[:-1])

        # Let the core know that we're ready
        self.ready = True

        # Wait until all threads are ready and the core signals us to continue
        self.event.wait()

        # Send the last byte
        conn.send(request_str[-1:])

    def connect(self, host, port, use_ssl):
        sock = socket.create_connection((host, port))

        if use_ssl:
            sock = ssl.wrap_socket(sock)

        return sock


def create_threads(num_threads, plugin_inst, event):
    all_threads = []

    for i in xrange(num_threads):
        rct = RaceConditionThread(i, plugin_inst, event)
        all_threads.append(rct)

    return all_threads